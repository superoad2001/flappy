//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/extra/controles.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/extra/controles.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Controles: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Controles()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""controles"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""f939f042-34d2-453a-b97e-45ebf9a3ffb2"",
            ""actions"": [
                {
                    ""name"": ""der"",
                    ""type"": ""Value"",
                    ""id"": ""93c922a8-45a8-44b9-8b5c-afa8e7cac131"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""izq"",
                    ""type"": ""Value"",
                    ""id"": ""ee0691a5-ea6f-4380-92df-1560badb776a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""arr"",
                    ""type"": ""Value"",
                    ""id"": ""cfef1347-86f6-4522-b076-d6f696b9a23c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""abj"",
                    ""type"": ""Value"",
                    ""id"": ""2b969d54-c6b8-475d-8c1e-60390613ab6c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""space"",
                    ""type"": ""Value"",
                    ""id"": ""a59a6c98-527d-469b-98f9-3acde25dd52c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""der2"",
                    ""type"": ""Value"",
                    ""id"": ""b0973918-4a09-4e56-b5f8-1c23031c1708"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""izq2"",
                    ""type"": ""Value"",
                    ""id"": ""d1ee72bc-c9ca-48c9-8265-1fbb5ad11552"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""atras"",
                    ""type"": ""Value"",
                    ""id"": ""43cb2005-1b1b-44b3-b50e-cadb717fdd9a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d0c2ce10-e320-4603-b2b6-3a13affaecdb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""der"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d091422-eda3-4c3e-b553-4651fdc2e822"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""der"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""639bd2b3-4322-4307-b505-ec7a8c948122"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""izq"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50d59c6b-4ec7-496e-a3cb-d3ad6d866ae7"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""izq"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a3d42ea-a771-408a-9130-a9fe08e4eea2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""arr"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""317a7a81-5394-47f8-b413-d1138ffa5dd7"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""arr"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea1eb4ed-e150-4430-9428-ebd2888ca61a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""abj"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60849ac8-505a-4439-95f1-517c8dc73606"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""abj"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38112f12-9685-4ea7-b1d2-149a65b4737c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""785a373c-47e9-4b17-8e73-63ef73faf33e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8bfbc06-6f8d-49ad-931f-cf4873400436"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""der2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bd9c968-e81b-4df5-a863-a2f23104310e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""der2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51bac479-2a9e-49b3-b9d6-a491ce29a492"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""izq2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9d98bac-bef4-4f80-9b1d-1c05f49e7c1c"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""izq2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31e1c15d-96d8-4138-a920-7ed6390bd49b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""atras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f6fd830-c877-414e-91c4-447f4639bd7d"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""atras"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""base"",
            ""bindingGroup"": ""base"",
            ""devices"": []
        }
    ]
}");
        // Base
        m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
        m_Base_der = m_Base.FindAction("der", throwIfNotFound: true);
        m_Base_izq = m_Base.FindAction("izq", throwIfNotFound: true);
        m_Base_arr = m_Base.FindAction("arr", throwIfNotFound: true);
        m_Base_abj = m_Base.FindAction("abj", throwIfNotFound: true);
        m_Base_space = m_Base.FindAction("space", throwIfNotFound: true);
        m_Base_der2 = m_Base.FindAction("der2", throwIfNotFound: true);
        m_Base_izq2 = m_Base.FindAction("izq2", throwIfNotFound: true);
        m_Base_atras = m_Base.FindAction("atras", throwIfNotFound: true);
    }

    ~@Controles()
    {
        UnityEngine.Debug.Assert(!m_Base.enabled, "This will cause a leak and performance issues, Controles.Base.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Base
    private readonly InputActionMap m_Base;
    private List<IBaseActions> m_BaseActionsCallbackInterfaces = new List<IBaseActions>();
    private readonly InputAction m_Base_der;
    private readonly InputAction m_Base_izq;
    private readonly InputAction m_Base_arr;
    private readonly InputAction m_Base_abj;
    private readonly InputAction m_Base_space;
    private readonly InputAction m_Base_der2;
    private readonly InputAction m_Base_izq2;
    private readonly InputAction m_Base_atras;
    /// <summary>
    /// Provides access to input actions defined in input action map "Base".
    /// </summary>
    public struct BaseActions
    {
        private @Controles m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public BaseActions(@Controles wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Base/der".
        /// </summary>
        public InputAction @der => m_Wrapper.m_Base_der;
        /// <summary>
        /// Provides access to the underlying input action "Base/izq".
        /// </summary>
        public InputAction @izq => m_Wrapper.m_Base_izq;
        /// <summary>
        /// Provides access to the underlying input action "Base/arr".
        /// </summary>
        public InputAction @arr => m_Wrapper.m_Base_arr;
        /// <summary>
        /// Provides access to the underlying input action "Base/abj".
        /// </summary>
        public InputAction @abj => m_Wrapper.m_Base_abj;
        /// <summary>
        /// Provides access to the underlying input action "Base/space".
        /// </summary>
        public InputAction @space => m_Wrapper.m_Base_space;
        /// <summary>
        /// Provides access to the underlying input action "Base/der2".
        /// </summary>
        public InputAction @der2 => m_Wrapper.m_Base_der2;
        /// <summary>
        /// Provides access to the underlying input action "Base/izq2".
        /// </summary>
        public InputAction @izq2 => m_Wrapper.m_Base_izq2;
        /// <summary>
        /// Provides access to the underlying input action "Base/atras".
        /// </summary>
        public InputAction @atras => m_Wrapper.m_Base_atras;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Base; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="BaseActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="BaseActions" />
        public void AddCallbacks(IBaseActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseActionsCallbackInterfaces.Add(instance);
            @der.started += instance.OnDer;
            @der.performed += instance.OnDer;
            @der.canceled += instance.OnDer;
            @izq.started += instance.OnIzq;
            @izq.performed += instance.OnIzq;
            @izq.canceled += instance.OnIzq;
            @arr.started += instance.OnArr;
            @arr.performed += instance.OnArr;
            @arr.canceled += instance.OnArr;
            @abj.started += instance.OnAbj;
            @abj.performed += instance.OnAbj;
            @abj.canceled += instance.OnAbj;
            @space.started += instance.OnSpace;
            @space.performed += instance.OnSpace;
            @space.canceled += instance.OnSpace;
            @der2.started += instance.OnDer2;
            @der2.performed += instance.OnDer2;
            @der2.canceled += instance.OnDer2;
            @izq2.started += instance.OnIzq2;
            @izq2.performed += instance.OnIzq2;
            @izq2.canceled += instance.OnIzq2;
            @atras.started += instance.OnAtras;
            @atras.performed += instance.OnAtras;
            @atras.canceled += instance.OnAtras;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="BaseActions" />
        private void UnregisterCallbacks(IBaseActions instance)
        {
            @der.started -= instance.OnDer;
            @der.performed -= instance.OnDer;
            @der.canceled -= instance.OnDer;
            @izq.started -= instance.OnIzq;
            @izq.performed -= instance.OnIzq;
            @izq.canceled -= instance.OnIzq;
            @arr.started -= instance.OnArr;
            @arr.performed -= instance.OnArr;
            @arr.canceled -= instance.OnArr;
            @abj.started -= instance.OnAbj;
            @abj.performed -= instance.OnAbj;
            @abj.canceled -= instance.OnAbj;
            @space.started -= instance.OnSpace;
            @space.performed -= instance.OnSpace;
            @space.canceled -= instance.OnSpace;
            @der2.started -= instance.OnDer2;
            @der2.performed -= instance.OnDer2;
            @der2.canceled -= instance.OnDer2;
            @izq2.started -= instance.OnIzq2;
            @izq2.performed -= instance.OnIzq2;
            @izq2.canceled -= instance.OnIzq2;
            @atras.started -= instance.OnAtras;
            @atras.performed -= instance.OnAtras;
            @atras.canceled -= instance.OnAtras;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BaseActions.UnregisterCallbacks(IBaseActions)" />.
        /// </summary>
        /// <seealso cref="BaseActions.UnregisterCallbacks(IBaseActions)" />
        public void RemoveCallbacks(IBaseActions instance)
        {
            if (m_Wrapper.m_BaseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="BaseActions.AddCallbacks(IBaseActions)" />
        /// <seealso cref="BaseActions.RemoveCallbacks(IBaseActions)" />
        /// <seealso cref="BaseActions.UnregisterCallbacks(IBaseActions)" />
        public void SetCallbacks(IBaseActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="BaseActions" /> instance referencing this action map.
    /// </summary>
    public BaseActions @Base => new BaseActions(this);
    private int m_baseSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme baseScheme
    {
        get
        {
            if (m_baseSchemeIndex == -1) m_baseSchemeIndex = asset.FindControlSchemeIndex("base");
            return asset.controlSchemes[m_baseSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Base" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="BaseActions.AddCallbacks(IBaseActions)" />
    /// <seealso cref="BaseActions.RemoveCallbacks(IBaseActions)" />
    public interface IBaseActions
    {
        /// <summary>
        /// Method invoked when associated input action "der" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDer(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "izq" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIzq(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "arr" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnArr(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "abj" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAbj(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "space" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpace(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "der2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDer2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "izq2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIzq2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "atras" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAtras(InputAction.CallbackContext context);
    }
}
